#
# SPDX-License-Identifier: GPL-2.0
#
# Copyright (c) 2013-2023 Igor Pecovnik, igor@armbian.com
#
# This file is a part of the Armbian Build Framework
# https://github.com/armbian/build/
#

declare -g ARCH="arm64"
declare -g OFFSET=8

declare -g ATFSOURCE='https://github.com/MYiR-Dev/myir-st-arm-trusted-firmware.git'
declare -g ATFBRANCH="branch:develop-ld25x-v2.10"
declare -g ATFPATCHDIR='atf-stm32mp2'
declare -g ATF_TARGET_MAP="PLAT=stm32mp2 ARCH=aarch64 ARM_ARCH_MAJOR=8 SPD=opteed STM32MP25=1 STM32MP_SDMMC=1 STM32MP_LPDDR4_TYPE=1 all;;build/stm32mp2/release/bl2.bin build/stm32mp2/release/bl31.bin"

declare -g BOOTDELAY=1
declare -g BOOTSOURCE='https://github.com/MYiR-Dev/myir-st-u-boot.git'
declare -g BOOTPATCHDIR="${BOOTPATCHDIR:-"u-boot-stm32mp2"}"
declare -g BOOTBRANCH="${BOOTBRANCH:-"branch:develop-ld25x-v2023.10"}"
declare -g UBOOT_TARGET_MAP=";;u-boot.bin fip.bin tf-a-sdcard.stm32"

declare -g IMAGE_PARTITION_TABLE="gpt"
declare -g LINUXFAMILY="stm32mp2"

# OP-TEE build require pkgs
function add_host_dependencies__stm32mp2_add_pkgs_hostdep() {
	display_alert "Adding bootloader build dep" "for ${BOARD} bootloader compile" "debug"
	declare -g EXTRA_BUILD_DEPS="${EXTRA_BUILD_DEPS} cmake python3-cryptography python3-pil python3-pyelftools"
}

# Handling of FIP blobs
function uboot_custom_postprocess() {
	
	display_alert "fetch optee."
	fetch_from_repo "${OPTEE_GIT_URL:-"https://github.com/MYiR-Dev/myir-st-optee_os"}" "myir-st-optee_os" "branch:${OPTEE_GIT_BRANCH:-"develop-ld25x-4.0"}"
	OPTEE_DIR="$SRC/cache/sources/myir-st-optee_os"
	
	display_alert "fetch ddr_fw."
	fetch_from_repo "${DDR_FW_GIT_URL:-"https://github.com/STMicroelectronics/stm32-ddr-phy-binary"}" "stm32-ddr-phy-binary" "branch:${DDR_FW_GIT_BRANCH:-"main"}"
	DDR_FW_DIR="$SRC/cache/sources/stm32-ddr-phy-binary"
	
	declare -g UBOOT_BUILD_DIR="${SRC}/cache/sources/u-boot-worktree/u-boot/develop-ld25x-v2023.10"
	declare -g ATF_BUILD_DIR="$SRC/cache/sources/arm-trusted-firmware/develop-ld25x-v2.10"
	
	display_alert "compile optee."
	cd ${OPTEE_DIR}
	
	make -j$(nproc) PLATFORM=stm32mp2 \
		CROSS_COMPILE_core=${UBOOT_COMPILER} \
		CROSS_COMPILE_ta_arm64=${UBOOT_COMPILER} \
		ARCH=arm \
		CFG_ARM64_core=y \
		NOWERROR=1 \
		CFG_TEE_CORE_LOG_LEVEL=2 \
		CFG_SCMI_SCPFW=y \
		CFG_EMBED_DTB_SOURCE_FILE=${BOARD}.dts \
		CFG_STM32MP25=y
	
	cd ${ATF_BUILD_DIR}
	# ATF needs OP-TEE blobs, recompile ATF.
	make -j$(nproc) PLAT=stm32mp2 \
		ARCH=aarch64 \
		ARM_ARCH_MAJOR=8 \
		CROSS_COMPILE=${ATF_COMPILER} \
		LOG_LEVEL=40 \
		SPD=opteed \
		STM32MP25=1 \
		BL32=${OPTEE_DIR}/out/arm-plat-stm32mp2/core/tee-header_v2.bin \
		BL32_EXTRA1=${OPTEE_DIR}/out/arm-plat-stm32mp2/core/tee-pager_v2.bin \
		BL33=${UBOOT_BUILD_DIR}/u-boot-nodtb.bin \
		BL33_CFG=${UBOOT_BUILD_DIR}/u-boot.dtb \
		STM32MP_DDR_FW=${DDR_FW_DIR}/stm32mp2/lpddr4_pmu_train.bin \
		DTB_FILE_NAME=${BOARD}.dtb \
		STM32MP_SDMMC=1 STM32MP_LPDDR4_TYPE=1 all fip
		
	cp "${ATF_BUILD_DIR}/build/stm32mp2/release/fip.bin" \
		"${UBOOT_BUILD_DIR}"
	cp "${ATF_BUILD_DIR}/build/stm32mp2/release/tf-a-${BOARD}.stm32" \
		"${UBOOT_BUILD_DIR}/tf-a-sdcard.stm32"
	
	cd "${UBOOT_BUILD_DIR}"
}

case "${BRANCH}" in

	legacy)
		KERNELSOURCE='https://github.com/chainsx/linux-stm32mp2.git'
		KERNELBRANCH="branch:linux-6.1"
		declare -g KERNEL_MAJOR_MINOR="6.1"
		KERNELPATCHDIR="${LINUXFAMILY}-${BRANCH}"
		LINUXCONFIG="linux-${LINUXFAMILY}-${BRANCH}"

		;;

esac

write_uboot_platform() {
	# append bootloader partition info
	echo "2048,2048" | sfdisk --no-reread --append "$2"
	sgdisk -c 2:"fsbla" "$2"
	echo "4096,8192" | sfdisk --no-reread --append "$2"
	sgdisk -c 3:"fip" "$2"
	echo "12288,2048" | sfdisk --no-reread --append "$2"
	sgdisk -c 4:"u-boot-env" "$2"
	
	# write bootloader
	dd if="$1/tf-a-sdcard.stm32" of="$2" bs=512 seek=2048 conv=notrunc
	dd if="$1/fip.bin" of="$2" bs=512 seek=4096 conv=notrunc
}
